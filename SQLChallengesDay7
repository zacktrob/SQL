#The following slq code represents solutions to problems/questions in the udemy course: 
#15Days of SQL: The complete SQL masterclass. The below is for day 7. 

-- day 7


-- return films where length is longer than average of all films
SELECT 
    title, length
FROM
    film
WHERE
    length > (SELECT 
            AVG(length)
        FROM
            film);
            
-- return all films that are available in inventory in store2 more than 3 times
SELECT 
    *
FROM
    film
WHERE
    film_id IN (SELECT 
            film_id
        FROM
            inventory
        WHERE
            store_id = 2
        GROUP BY film_id
        HAVING COUNT(*) > 3); 
 
 -- return all customers first/last names that have made a payment on '2020-01-25'       
SELECT 
    first_name, last_name
FROM
    customer
WHERE
    customer_id IN (SELECT 
            customer_id
        FROM
            payment
        WHERE
            payment_date BETWEEN '2020-01-25' AND '2020-01-25 23:59'); 

-- return all customers first names and email that have spent more than $30            
SELECT 
    first_name, email
FROM
    customer
WHERE
    customer_id IN (SELECT 
            customer_id
        FROM
            payment
        GROUP BY customer_id
        HAVING SUM(amount) > 30); 
        
-- return customers first/last name that are from Cali and have spent more than $100 total

SELECT 
    first_name, last_name
FROM
    customer
WHERE
    address_id IN (SELECT 
            address_id
        FROM
            address
        WHERE
            district = 'California')
        AND customer_id IN (SELECT 
            customer_id
        FROM
            payment
        GROUP BY customer_id
        HAVING SUM(amount) > 100); 

-- select average total spent per day
-- total amount/# days
SELECT 
    ROUND(total / days, 2)
FROM
    (SELECT 
        SUM(amount) AS total,
            COUNT(DISTINCT DATE(payment_date)) AS days
    FROM
        payment) AS sub; 
        
-- show payments together with difference between max payment amount
SELECT 
    *,
    (SELECT 
            MAX(amount)
        FROM
            payment) - amount AS difference
FROM
    payment; 


--  return title, film_id, and replacement cost with lowest replacement cost in each category - rating
SELECT 
    title, film_id, replacement_cost, rating
FROM
    film f1
WHERE
    replacement_cost = (SELECT 
            MIN(replacement_cost)
        FROM
            film f2
        WHERE
            f1.rating = f2.rating); 
    
